from flask import Flask, request, jsonify
import joblib
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Model
import numpy as np
import json

app = Flask(__name__)

labels = {0:'Instantaccess',1:'Dialplatform.B',2:'Obfuscator.AD',3:'Autorun.K',4:'Lolyda.AA1',5:'Lolyda.AA2',6:'C2LOP.P',7:'Allaple.A',8:'Yuner.A',9:'Lolyda.AA3',10:'Alueron.gen!J',11:'Swizzor.gen!I',12:'C2LOP.gen!g',13:'Malex.gen!J',14:'VB.AT',15:'Rbot!gen',16:'Allaple.L',17:'Skintrim.N',18:'Lolyda.AT',19:'Fakerean',20:'Swizzor.gen!E',21:'Agent.FYI',22:'Dontovo.A',23:'Wintrim.BX', 24:'Adialer.C'}

model = VGG16()
model = Model(inputs = model.inputs, outputs = model.layers[-2].output)
pred_model = joblib.load('vgg-dt-pred.pkl')
target_size = (224,224)


def predict_result(img_path,type):
    feature = []
    features = []
    img = load_img(img_path, target_size=target_size)
    img = img_to_array(img)
    img = img.reshape((1, img.shape[0], img.shape[1], img.shape[2]))
    img = preprocess_input(img)
    feature = model.predict(img)
    features.append(feature)
    features_2D = np.vstack(features)
    ans = pred_model.predict(features_2D)
    new_list = ans.tolist()
    json_data = json.dumps(new_list)
    return json_data


# Load your trained model

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify(error="Please try again. The image doesn't exist.")
    
    file = request.files.get('file')
    img = file.read()
    img_path = "./uploaded_images/test.png"
    with open(img_path,'wb') as dir:
        dir.write(img)
    
    result = predict_result(img_path,type)
    # classType = labels[result[0]]
    chars_to_remove = "[]"
    result = ''.join(char for char in result if char not in chars_to_remove)
    classType = labels[int(result)]
    return jsonify(prediction=classType)

if __name__ == '__main__':
    app.run(debug=True)
